#include <iostream>
using namespace std;
class node{
    public:
    int data;
    node*next;
    node(int val){
        data=val;
        next=NULL;
    }
    
};
void traverse(node* &head){
    node*n=head;
    while(n!=NULL){
        cout<<n->data<<endl;
        n=n->next;
    }
}
node*insertatfirst(node* &head,int val){
    node *n=new node(val);
    if(head==NULL){
        head=n;
    }
    else{
        n->next=head;
        head=n;
    }
    return head;
}
node*insertatlast(node* &head,int val){
    node *n=new node(val);

    node *temp=head;
    while(temp->next!=NULL){
        
        temp=temp->next;
    }
    temp->next=n;
    return head;
}
node *insertatpos(node * &head,int val,int pos){
    node *n=new node(val);

    node*temp=head;
    
    int i=0;
    while(i!=pos-1){
        i+=1;
        temp=temp->next;
    
    }
    n->next=temp->next;
    temp->next=n;
    return head;
    
}
node*deletefirst(node * &head){
    node*p=head;
    head=head->next;
    delete(p);
    return head;
}
node*deletelast(node * &head){
    node*temp=head;
    node*temp2=head->next;
    while(temp2->next!=NULL){
        temp=temp->next;
        temp2=temp2->next;
    }
    temp->next=temp2->next;
    delete(temp2);
    return head;
}
node*deleteatpos(node * &head,int pos){
    node*temp=head;
    node*temp2=head->next;
    int i=0;
    while(i!=pos-1){
        temp=temp->next;
        temp2=temp2->next;
        i+=1;
    }
    temp->next=temp2->next;
    delete(temp2);
    return head;
}
//REVERSE ENTIRE LINKED LIST
node*reverse(node * &head){
    node*prev=NULL;
    node*current=head;
    node*nextptr;
    while(current !=NULL){
        nextptr=current->next;
        current->next=prev;
        prev=current;
        current=nextptr;
    }
    head=prev;
    return head;
}
//REVERSE K NODES
node*reverseknodes(node * &head,int count){
    node*prev=NULL;
    node*current=head;
    node*nextptr;
    int i=0;
    while(i<count && current!=NULL){
        nextptr=current->next;
        current->next=prev;
        prev=current;
        current=nextptr;
        i+=1;
    }
    if(nextptr!=NULL){
        head->next=reverseknodes(nextptr,count);
    }
    head=prev;
    return head;
}
//MAKECYLE
node*makecycle(node * &head,int pos){
    node*temp=head;
    node*startcycle;
    int count=0;
    while(temp->next!=NULL){
        if(count==pos-1){
            startcycle=temp;
            
        }
         temp=temp->next;
        }
        temp->next=startcycle;
        return head;
}
//DETECTING THE CYCLE
bool detectcycle(node * &head){
    node*fast=head;
    node*slow=head;
    while(fast!=NULL && fast->next!=NULL){
        fast=fast->next->next;
        slow=slow->next;
        if(fast==slow){
            return true;
        }
    }
    return false;
}
//REMOVAL OF CYCLE
void removalofcycle(node * &head){
    node*fast=head;
    node*slow=head;
    do{
        slow=slow->next;
        fast=fast->next->next;
    }while(slow!=fast);
    fast=head;
    while(fast->next!=slow->next){
        fast=fast->next;
        slow=slow->next;
    }
    
    slow->next=NULL;
}
//MERGE TWO SORTED LINKED LIST
node*merge(node* &head1,node * &head2){
    node*t1=head1;
    node*t2=head2;
    node*dummynode=new node(-1);
    node *t3=dummynode;
    while(t1!=NULL && t2!=NULL){
        if(t1->data<t2->data){
            t3->next=t1;
            t1=t1->next;
        }
        else{
            t3->next=t2;
            t2=t2->next;
            
        }
        t3=t3->next;
    
    }
    while(t1!=NULL){
        t3->next=t1;
        t1=t1->next;
        t3=t3->next;
    }
    while(t2!=NULL){
        t3->next=t2;
        t2=t2->next;
        t3=t3->next;
    }
    return dummynode;
}
int main() {
    node* head=NULL;
    node* head2=NULL;
    head=insertatfirst(head,6);
    head=insertatlast(head,7);
    head=insertatlast(head,8);
    head=insertatlast(head,9);
    head2=insertatfirst(head2,10);
    head2=insertatlast(head2,11);
    head2=insertatlast(head2,12);
    head2=insertatlast(head2,13);
 // traverse(head);
 head=merge(head,head2);
  traverse(head);
    return 0;
}
